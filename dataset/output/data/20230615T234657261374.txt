Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Languages Language links are at the top of the page across from the title. Search Search Create account Log in Personal tools Create account Log in Pages for logged out editors learn more Contributions Talk Contents move to sidebar hide (Top) 1 Unary operations Toggle Unary operations subsection 1.1 Logical true 1.2 Logical false 1.3 Logical identity 1.4 Logical negation 2 Binary operations Toggle Binary operations subsection 2.1 Truth table for all binary logical operators 2.2 Logical conjunction (AND) 2.3 Logical disjunction (OR) 2.4 Logical implication 2.5 Logical equality 2.6 Exclusive disjunction 2.7 Logical NAND 2.8 Logical NOR 3 Size of truth tables 4 Applications Toggle Applications subsection 4.1 Truth table for most commonly used logical operators 4.2 Condensed truth tables for binary operators 4.3 Truth tables in digital logic 4.4 Applications of truth tables in digital electronics 5 History 6 See also 7 Notes 8 References Toggle References subsection 8.1 Works cited 9 External links Toggle the table of contents Toggle the table of contents Truth table 43 languages Afrikaans አማርኛ العربية বাংলা Català Čeština Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français 한국어 Հայերեն हिन्दी Bahasa Indonesia Italiano עברית Latina Latviešu Македонски Bahasa Melayu Nederlands 日本語 Norsk bokmål Polski Português Русский සිංහල Simple English Slovenčina Српски / srpski Suomi Svenska ไทย Türkçe Українська 吴语 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons From Wikipedia, the free encyclopedia Mathematical table used in logic A truth table is a mathematical table used in logic —specifically in connection with Boolean algebra , boolean functions , and propositional calculus —which sets out the functional values of logical expressions on each of their functional arguments, that is, for each combination of values taken by their logical variables . [1] In particular, truth tables can be used to show whether a propositional expression is true for all legitimate input values, that is, logically valid . A truth table has one column for each input variable (for example, P and Q), and one final column showing all of the possible results of the logical operation that the table represents (for example, P XOR Q). Each row of the truth table contains one possible configuration of the input variables (for instance, P=true Q=false), and the result of the operation for those values. See the examples below for further clarification. Ludwig Wittgenstein is generally credited with inventing and popularizing the truth table in his Tractatus Logico-Philosophicus , which was completed in 1918 and published in 1921. [2] Such a system was also independently proposed in 1921 by Emil Leon Post . [3] An even earlier iteration of the truth table has also been found in unpublished manuscripts by Charles Sanders Peirce from 1893, antedating both publications by nearly 30 years. [4] Unary operations [ edit ] There are 4 unary operations: Always true Never true, unary falsum Unary identity Unary negation Logical true [ edit ] The output value is always true, regardless of the input value of p p T T T F T Logical false [ edit ] The output value is never true: that is, always false, regardless of the input value of p p F T F F F Logical identity [ edit ] Logical identity is an operation on one logical value p, for which the output value remains p. The truth table for the logical identity operator is as follows: p p T T F F Logical negation [ edit ] Logical negation is an operation on one logical value , typically the value of a proposition , that produces a value of true if its operand is false and a value of false if its operand is true. The truth table for NOT p (also written as ¬p , Np , Fpq , or ~p ) is as follows: p ¬p T F F T Binary operations [ edit ] There are 16 possible truth functions of two binary variables : Truth table for all binary logical operators [ edit ] Here is an extended truth table giving definitions of all sixteen possible truth functions of two Boolean variables P and Q: [note 1] p q F 0 NOR 1 ↚ 2 ¬p 3 ↛ 4 ¬q 5 XOR 6 NAND 7 AND 8 XNOR 9 q 10 → 11 p 12 ← 13 OR 14 T 15 T T F F F F F F F F T T T T T T T T T F F F F F T T T T F F F F T T T T F T F F T T F F T T F F T T F F T T F F F T F T F T F T F T F T F T F T Com ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ Assoc ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ Adj F 0 NOR 1 ↛ 4 ¬q 5 ↚ 2 ¬p 3 XOR 6 NAND 7 AND 8 XNOR 9 p 12 ← 13 q 10 → 11 OR 14 T 15 Neg T 15 OR 14 ← 13 p 12 → 11 q 10 XNOR 9 AND 8 NAND 7 XOR 6 ¬q 5 ↛ 4 ¬p 3 ↚ 2 NOR 1 F 0 Dual T 15 NAND 7 → 11 ¬p 3 ← 13 ¬q 5 XNOR 9 NOR 1 OR 14 XOR 6 q 10 ↚ 2 p 12 ↛ 4 AND 8 F 0 L id F F T T T,F T F R id F F T T T,F T F where T = true. F = false. The superscripts 0 to 15 is the number resulting from reading the four truth values as a binary number with F = 0 and T = 1. The Com row indicates whether an operator, op , is commutative - P op Q = Q op P . The Assoc row indicates whether an operator, op , is associative - (P op Q) op R = P op (Q op R) . The Adj row shows the operator op2 such that P op Q = Q op2 P The Neg row shows the operator op2 such that P op Q = ¬(P op2 Q) The Dual row shows the dual operation obtained by interchanging T with F, and AND with OR. The L id row shows the operator's left identities if it has any - values I such that I op Q = Q . The R id row shows the operator's right identities if it has any - values I such that P op I = P . [note 2] The four combinations of input values for p, q, are read by row from the table above. The output function for each p, q combination, can be read, by row, from the table. Key: The following table is oriented by column, rather than by row. There are four columns rather than four rows, to display the four combinations of p, q, as input. p : T T F F q : T F T F There are 16 rows in this key, one row for each binary function of the two binary variables, p, q. For example, in row 2 of this Key, the value of Converse nonimplication (' ↚ {\displaystyle \nleftarrow } ') is solely T, for the column denoted by the unique combination p=F, q=T; while in row 2, the value of that ' ↚ {\displaystyle \nleftarrow } ' operation is F for the three remaining columns of p, q. The output row for ↚ {\displaystyle \nleftarrow } is thus 2: F F T F and the 16-row [5] key is [5] operator Operation name 0 (F F F F)(p, q) ⊥ false , Opq Contradiction 1 (F F F T)(p, q) NOR p ↓ q , Xpq Logical NOR 2 (F F T F)(p, q) ↚ p ↚ q , Mpq Converse nonimplication 3 (F F T T)(p, q) ¬p , ~p ¬p , Np , Fpq Negation 4 (F T F F)(p, q) ↛ p ↛ q , Lpq Material nonimplication 5 (F T F T)(p, q) ¬q , ~q ¬q , Nq , Gpq Negation 6 (F T T F)(p, q) XOR p ⊕ q , Jpq Exclusive disjunction 7 (F T T T)(p, q) NAND p ↑ q , Dpq Logical NAND 8 (T F F F)(p, q) AND p ∧ q , Kpq Logical conjunction 9 (T F F T)(p, q) XNOR p If and only if q , Epq Logical biconditional 10 (T F T F)(p, q) q q , Hpq Projection function 11 (T F T T)(p, q) p → q if p then q , Cpq Material implication 12 (T T F F)(p, q) p p , Ipq Projection function 13 (T T F T)(p, q) p ← q p if q , Bpq Converse implication 14 (T T T F)(p, q) OR p ∨ q , Apq Logical disjunction 15 (T T T T)(p, q) ⊤ true , Vpq Tautology Logical operators can also be visualized using Venn diagrams . Logical conjunction (AND) [ edit ] Logical conjunction is an operation on two logical values , typically the values of two propositions , that produces a value of true if both of its operands are true. The truth table for p AND q (also written as p ∧ q , Kpq , p & q , or p ⋅ {\displaystyle \cdot } q ) is as follows: p q p ∧ q T T T T F F F T F F F F In ordinary language terms, if both p and q are true, then the conjunction p ∧ q is true. For all other assignments of logical values to p and to q the conjunction p ∧ q is false. It can also be said that if p , then p ∧ q is q , otherwise p ∧ q is p . Logical disjunction (OR) [ edit ] Logical disjunction is an operation on two logical values , typically the values of two propositions , that produces a value of true if at least one of its operands is true. The truth table for p OR q (also written as p ∨ q , Apq , p || q , or p + q ) is as follows: p q p ∨ q T T T T F T F T T F F F Stated in English, if p , then p ∨ q is p , otherwise p ∨ q is q . Logical implication [ edit ] Logical implication and the material conditional are both associated with an operation on two logical values , typically the values of two propositions , which produces a value of false if the first operand is true and the second operand is false, and a value of true otherwise. The truth table associated with the logical implication p implies q (symbolized as p ⇒ q , or more rarely Cpq ) is as follows: p q p ⇒ q T T T T F F F T T F F T The truth table associated with the material conditional if p then q (symbolized as p → q ) is as follows: p q p → q T T T T F F F T T F F T It may also be useful to note that p ⇒ q and p → q are equivalent to ¬p ∨ q . Logical equality [ edit ] Logical equality (also known as biconditional or exclusive nor ) is an operation on two logical values , typically the values of two propositions , that produces a value of true if both operands are false or both operands are true. The truth table for p XNOR q (also written as p ↔ q , Epq , p = q , or p ≡ q ) is as follows: p q p ↔ q T T T T F F F T F F F T So p EQ q is true if p and q have the same truth value (both true or both false), and false if they have different truth values. Exclusive disjunction [ edit ] Exclusive disjunction is an operation on two logical values , typically the values of two propositions , that produces a value of true if one but not both of its operands is true. The truth table for p XOR q (also written as Jpq , or p ⊕ q ) is as follows: p q p ⊕ q T T F T F T F T T F F F For two propositions, XOR can also be written as (p ∧ ¬q) ∨ (¬p ∧ q). Logical NAND [ edit ] The logical NAND is an operation on two logical values , typically the values of two propositions , that produces a value of false if both of its operands are true. In other words, it produces a value of true if at least one of its operands is false. The truth table for p NAND q (also written as p ↑ q , Dpq , or p | q ) is as follows: p q p ↑ q T T F T F T F T T F F T It is frequently useful to express a logical operation as a compound operation, that is, as an operation that is built up or composed from other operations. Many such compositions are possible, depending on the operations that are taken as basic or "primitive" and the operations that are taken as composite or "derivative". In the case of logical NAND, it is clearly expressible as a compound of NOT and AND. The negation of a conjunction: ¬( p ∧ q ), and the disjunction of negations: (¬ p ) ∨ (¬ q ) can be tabulated as follows: p q p ∧ q ¬( p ∧ q ) ¬ p ¬ q (¬ p ) ∨ (¬ q ) T T T F F F F T F F T F T T F T F T T F T F F F T T T T Logical NOR [ edit ] The logical NOR is an operation on two logical values , typically the values of two propositions , that produces a value of true if both of its operands are false. In other words, it produces a value of false if at least one of its operands is true. ↓ is also known as the Peirce arrow after its inventor, Charles Sanders Peirce , and is a Sole sufficient operator . The truth table for p NOR q (also written as p ↓ q , or Xpq ) is as follows: p q p ↓ q T T F T F F F T F F F T The negation of a disjunction ¬( p ∨ q ), and the conjunction of negations (¬ p ) ∧ (¬ q ) can be tabulated as follows: p q p ∨ q ¬( p ∨ q ) ¬ p ¬ q (¬ p ) ∧ (¬ q ) T T T F F F F T F T F F T F F T T F T F F F F F T T T T Inspection of the tabular derivations for NAND and NOR, under each assignment of logical values to the functional arguments p and q , produces the identical patterns of functional values for ¬( p ∧ q ) as for (¬ p ) ∨ (¬ q ), and for ¬( p ∨ q ) as for (¬ p ) ∧ (¬ q ). Thus the first and second expressions in each pair are logically equivalent, and may be substituted for each other in all contexts that pertain solely to their logical values. This equivalence is one of De Morgan's laws . Size of truth tables [ edit ] If there are n input variables then there are 2 n possible combinations of their truth values. A given function may produce true or false for each combination so the number of different functions of n variables is the double exponential 2 2 n . n 2 n 2 2 n 0 1 2 1 2 4 2 4 16 3 8 256 4 16 65,536 5 32 4,294,967,296 ≈ 4.3 × 10 9 6 64 18,446,744,073,709,551,616 ≈ 1.8 × 10 19 7 128 340,282,366,920,938,463,463,374,607,431,768,211,456 ≈ 3.4 × 10 38 8 256 115,792,089,237,316,195,423,570,985,008,687,907,853,269,984,665,640,564,039,457,584,007,913,129,639,936 ≈ 1.2 × 10 77 Truth tables for functions of three or more variables are rarely given. Applications [ edit ] Truth tables can be used to prove many other logical equivalences . For example, consider the following truth table: ( p ⇒ q ) ≡ ( ¬ p ∨ q ) {\displaystyle (p\Rightarrow q)\equiv (\lnot p\lor q)} p {\displaystyle p} q {\displaystyle q} ¬ p {\displaystyle \lnot p} ¬ p ∨ q {\displaystyle \lnot p\lor q} p ⇒ q {\displaystyle p\Rightarrow q} T T F T T T F F F F F T T T T F F T T T This demonstrates the fact that p ⇒ q {\displaystyle p\Rightarrow q} is logically equivalent to ¬ p ∨ q {\displaystyle \lnot p\lor q} . Truth table for most commonly used logical operators [ edit ] Here is a truth table that gives definitions of the 7 most commonly used out of the 16 possible truth functions of two Boolean variables P and Q : P Q P ∧ Q {\displaystyle P\land Q} P ∨ Q {\displaystyle P\lor Q} P ∨ _ Q {\displaystyle P\ {\underline {\lor }}\ Q} P ∧ _ Q {\displaystyle P\ {\underline {\land }}\ Q} P ⇒ Q {\displaystyle P\Rightarrow Q} P ⇐ Q {\displaystyle P\Leftarrow Q} P ⇔ Q {\displaystyle P\Leftrightarrow Q} T T T T F T T T T T F F T T F F T F F T F T T F T F F F F F F F T T T T P Q P ∧ Q {\displaystyle P\land Q} P ∨ Q {\displaystyle P\lor Q} P ∨ _ Q {\displaystyle P\ {\underline {\lor }}\ Q} P ∧ _ Q {\displaystyle P\ {\underline {\land }}\ Q} P ⇒ Q {\displaystyle P\Rightarrow Q} P ⇐ Q {\displaystyle P\Leftarrow Q} P ⇔ Q {\displaystyle P\Leftrightarrow Q} AND (conjunction) OR (disjunction) XOR (exclusive or) XNOR (exclusive nor) conditional "if-then" conditional "then-if" biconditional "if-and-only-if" where T means true and F means false Condensed truth tables for binary operators [ edit ] For binary operators, a condensed form of truth table is also used, where the row headings and the column headings specify the operands and the table cells specify the result. For example, Boolean logic uses this condensed truth table notation: ∧ F T F F F T F T ∨ F T F F T T T T This notation is useful especially if the operations are commutative, although one can additionally specify that the rows are the first operand and the columns are the second operand. This condensed notation is particularly useful in discussing multi-valued extensions of logic, as it significantly cuts down on combinatoric explosion of the number of rows otherwise needed. It also provides for quickly recognizable characteristic "shape" of the distribution of the values in the table which can assist the reader in grasping the rules more quickly. Truth tables in digital logic [ edit ] Truth tables are also used to specify the function of hardware look-up tables (LUTs) in digital logic circuitry . For an n-input LUT, the truth table will have 2^ n values (or rows in the above tabular format), completely specifying a boolean function for the LUT. By representing each boolean value as a bit in a binary number , truth table values can be efficiently encoded as integer values in electronic design automation (EDA) software . For example, a 32-bit integer can encode the truth table for a LUT with up to 5 inputs. When using an integer representation of a truth table, the output value of the LUT can be obtained by calculating a bit index k based on the input values of the LUT, in which case the LUT's output value is the k th bit of the integer. For example, to evaluate the output value of a LUT given an array of n boolean input values, the bit index of the truth table's output value can be computed as follows: if the i th input is true, let V i = 1 {\displaystyle V_{i}=1} , else let V i = 0 {\displaystyle V_{i}=0} . Then the k th bit of the binary representation of the truth table is the LUT's output value, where k = V 0 × 2 0 + V 1 × 2 1 + V 2 × 2 2 + ⋯ + V n × 2 n {\displaystyle k=V_{0}\times 2^{0}+V_{1}\times 2^{1}+V_{2}\times 2^{2}+\dots +V_{n}\times 2^{n}} . Truth tables are a simple and straightforward way to encode boolean functions, however given the exponential growth in size as the number of inputs increase, they are not suitable for functions with a large number of inputs. Other representations which are more memory efficient are text equations and binary decision diagrams . Applications of truth tables in digital electronics [ edit ] In digital electronics and computer science (fields of applied logic engineering and mathematics), truth tables can be used to reduce basic boolean operations to simple correlations of inputs to outputs, without the use of logic gates or code. For example, a binary addition can be represented with the truth table: Binary addition A {\displaystyle A} B {\displaystyle B} C {\displaystyle C} R {\displaystyle R} T T T F T F F T F T F T F F F F where A is the first operand, B is the second operand, C is the carry digit, and R is the result. This truth table is read left to right: Value pair (A,B) equals value pair (C,R). Or for this example, A plus B equal result R, with the Carry C. Note that this table does not describe the logic operations necessary to implement this operation, rather it simply specifies the function of inputs to output values. With respect to the result, this example may be arithmetically viewed as modulo 2 binary addition, and as logically equivalent to the exclusive-or (exclusive disjunction) binary logic operation. In this case it can be used for only very simple inputs and outputs, such as 1s and 0s. However, if the number of types of values one can have on the inputs increases, the size of the truth table will increase. For instance, in an addition operation, one needs two operands, A and B. Each can have one of two values, zero or one. The number of combinations of these two values is 2×2, or four. So the result is four possible outputs of C and R. If one were to use base 3, the size would increase to 3×3, or nine possible outputs. The first "addition" example above is called a half-adder. A full-adder is when the carry from the previous operation is provided as input to the next adder. Thus, a truth table of eight rows would be needed to describe a full adder 's logic: A B C* | C R 0 0 0 | 0 0 0 1 0 | 0 1 1 0 0 | 0 1 1 1 0 | 1 0 0 0 1 | 0 1 0 1 1 | 1 0 1 0 1 | 1 0 1 1 1 | 1 1 Same as previous, but.. C* = Carry from previous adder History [ edit ] Irving Anellis 's research shows that C.S. Peirce appears to be the earliest logician (in 1893) to devise a truth table matrix. [4] [6] From the summary of his paper: In 1997, John Shosky discovered, on the verso of a page of the typed transcript of Bertrand Russell 's 1912 lecture on "The Philosophy of Logical Atomism" truth table matrices. The matrix for negation is Russell's, alongside of which is the matrix for material implication in the hand of Ludwig Wittgenstein. It is shown that an unpublished manuscript identified as composed by Peirce in 1893 includes a truth table matrix that is equivalent to the matrix for material implication discovered by John Shosky. An unpublished manuscript by Peirce identified as having been composed in 1883–84 in connection with the composition of Peirce's "On the Algebra of Logic: A Contribution to the Philosophy of Notation" that appeared in the American Journal of Mathematics in 1885 includes an example of an indirect truth table for the conditional. See also [ edit ] Philosophy portal Psychology portal Boolean domain Boolean-valued function Espresso heuristic logic minimizer Excitation table State-transition table First-order logic Functional completeness Karnaugh maps Logic gate Logical connective Logical graph Mathematical table Method of analytic tableaux Propositional calculus Truth function Decision table Notes [ edit ] ^ Information about notation may be found in ( Bocheński 1959 ), ( Enderton 2001 ), and ( Quine 1982 ). ^ The operators here with equal left and right identities (XOR, AND, XNOR, and OR) are also commutative monoids because they are also associative . While this distinction may be irrelevant in a simple discussion of logic, it can be quite important in more advanced mathematics. For example, in category theory an enriched category is described as a base category enriched over a monoid, and any of these operators can be used for enrichment. References [ edit ] ^ Enderton 2001 ^ von Wright, Georg Henrik (1955). "Ludwig Wittgenstein, A Biographical Sketch". The Philosophical Review . 64 (4): 527–545 (p. 532, note 9). doi : 10.2307/2182631 . JSTOR 2182631 . ^ Post, Emil (July 1921). "Introduction to a general theory of elementary propositions". American Journal of Mathematics . 43 (3): 163–185. doi : 10.2307/2370324 . hdl : 2027/uiuo.ark:/13960/t9j450f7q . JSTOR 2370324 . ^ a b Anellis, Irving H. (2012). "Peirce's Truth-functional Analysis and the Origin of the Truth Table". History and Philosophy of Logic . 33 : 87–97. doi : 10.1080/01445340.2011.621702 . S2CID 170654885 . ^ a b Wittgenstein, Ludwig (1922). "Proposition 5.101" (PDF) . Tractatus Logico-Philosophicus . ^ Peirce's publication included the work of Christine Ladd (1881) : Peirce's Ph.D. student Christine Ladd-Franklin found the truth table in Tractatus Logico-Philosophicus Proposition 5.101, 40 years earlier than Wittgenstein. Ladd, Christine (1881). Peirce, C.S. (ed.). On the Algebra of Logic . Studies in Logic. p. 62 . Works cited [ edit ] Bocheński, Józef Maria (1959). A Précis of Mathematical Logic . Translated by Bird, Otto. D. Reidel. doi : 10.1007/978-94-017-0592-9 . ISBN 978-94-017-0592-9 . Enderton, H. (2001). A Mathematical Introduction to Logic (2nd ed.). Harcourt Academic Press. ISBN 0-12-238452-0 . Quine, W.V. (1982). Methods of Logic (4th ed.). Harvard University Press. ISBN 978-0-674-57175-4 . External links [ edit ] Wikimedia Commons has media related to Truth tables . "Truth table" , Encyclopedia of Mathematics , EMS Press , 2001 [1994] Truth Tables, Tautologies, and Logical Equivalence Anellis, Irving H. (2011). "Peirce's Truth-functional Analysis and the Origin of Truth Tables". arXiv : 1108.2429 [ math.HO ]. Converting truth tables into Boolean expressions v t e Classical logic General Quantifiers Predicate Connective Tautology Truth tables Truth function Truth value Well-formed formula Idempotency of entailment Logicism Problem of multiple generality Associativity Distribution Classical logics Term Propositional First-order Second-order Higher-order Principles Commutativity of conjunction Excluded middle Bivalence Noncontradiction Monotonicity of entailment Explosion Rules De Morgan's laws Material implication Transposition modus ponens modus tollens modus ponendo tollens Constructive dilemma Destructive dilemma Disjunctive syllogism Hypothetical syllogism Absorption Introduction Negation Double negation Existential Universal Biconditional Conjunction Disjunction Elimination Double negation Existential Universal Biconditional Conjunction Disjunction People Bernard Bolzano George Boole Georg Cantor Richard Dedekind Augustus De Morgan Gottlob Frege Kurt Gödel Hugh MacColl Giuseppe Peano Charles Sanders Peirce Bertrand Russell Ernst Schröder Henry M. Sheffer Alfred Tarski Willard Van Orman Quine Ludwig Wittgenstein Jan Łukasiewicz Works Begriffsschrift Function and Concept The Principles of Mathematics Principia Mathematica Tractatus Logico-Philosophicus v t e Mathematical logic General Axiom list Cardinality First-order logic Formal proof Formal semantics Foundations of mathematics Information theory Lemma Logical consequence Model Set Theorem Theory Type theory Theorems ( list ) & Paradoxes Gödel's completeness and incompleteness theorems Tarski's undefinability Banach–Tarski paradox Cantor's theorem, paradox and diagonal argument Compactness Halting problem Lindström's Löwenheim–Skolem Russell's paradox Logics Traditional Classical logic Logical truth Tautology Proposition Inference Logical equivalence Consistency Equiconsistency Argument Soundness Validity Syllogism Square of opposition Venn diagram Propositional Boolean algebra Boolean functions Logical connectives Propositional calculus Propositional formula Truth tables Many-valued logic 3 Finite ∞ Predicate First-order list Second-order Monadic Higher-order Free Quantifiers Predicate Monadic predicate calculus Set theory Set Hereditary Class ( Ur- ) Element Ordered pair Ordinal number Subset Equality Extensionality Forcing Relation Equivalence Partition Set operations: Intersection Union Complement Cartesian product Power set Identities Types of Sets Countable Uncountable Empty Inhabited Singleton Finite Infinite Transitive Ultrafilter Recursive Fuzzy Universal Universe Constructible Grothendieck Von Neumann Maps & Cardinality Function / Map Domain Codomain Image In / Sur / Bi -jection Schröder–Bernstein theorem Isomorphism Gödel numbering Enumeration Large cardinal Inaccessible Aleph number Operation Binary Set theories Zermelo–Fraenkel Axiom of choice Continuum hypothesis General Kripke–Platek Morse–Kelley Naive New Foundations Tarski–Grothendieck Von Neumann–Bernays–Gödel Ackermann Constructive Formal systems ( list ), Language & Syntax Alphabet Arity Automata Axiom schema Expression Ground Extension by definition Conservative Relation Formation rule Grammar Formula Atomic Closed Ground Open Free/bound variable Language Metalanguage Logical connective ¬ ∨ ∧ → ↔ = Predicate Functional Variable Propositional variable Proof Quantifier ∃ ! ∀ rank Sentence Atomic Spectrum Signature String Substitution Symbol Function Logical/Constant Non-logical Variable Term Theory list Example axiomatic systems ( list ) of arithmetic : Peano second-order elementary function primitive recursive Robinson Skolem of the real numbers Tarski's axiomatization of Boolean algebras canonical minimal axioms of geometry : Euclidean Elements Hilbert's non-Euclidean Tarski's Principia Mathematica Proof theory Formal proof Natural deduction Logical consequence Rule of inference Sequent calculus Theorem Systems Axiomatic Deductive Hilbert list Complete theory Independence ( from ZFC ) Proof of impossibility Ordinal analysis Reverse mathematics Self-verifying theories Model theory Interpretation Function of models Model Equivalence Finite Saturated Spectrum Submodel Non-standard model of arithmetic Diagram Elementary Categorical theory Model complete theory Satisfiability Semantics of logic Strength Theories of truth Semantic Tarski's Kripke's T-schema Transfer principle Truth predicate Truth value Type Ultraproduct Validity Computability theory Church encoding Church–Turing thesis Computably enumerable Computable function Computable set Decision problem Decidable Undecidable P NP P versus NP problem Kolmogorov complexity Lambda calculus Primitive recursive function Recursion Recursive set Turing machine Type theory Related Abstract logic Category theory Concrete / Abstract Category Category of sets History of logic History of mathematical logic timeline Logicism Mathematical object Philosophy of mathematics Supertask Mathematics portal Authority control : National Germany Retrieved from " https://en.wikipedia.org/w/index.php?title=Truth_table&oldid=1157420628 " Categories : Boolean algebra Mathematical tables Semantics Propositional calculus Conceptual models Hidden categories: Articles with short description Short description matches Wikidata Commons category link is on Wikidata Articles with GND identifiers This page was last edited on 28 May 2023, at 13:42 (UTC) . Text is available under the Creative Commons Attribution-ShareAlike License 4.0 ; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Mobile view Developers Statistics Cookie statement Toggle limited content width